<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AI on Guixian 的日常记录</title><link>https://blog.chenguixian.com/categories/ai/</link><description>Recent content in AI on Guixian 的日常记录</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 15 Oct 2025 10:12:24 +0800</lastBuildDate><atom:link href="https://blog.chenguixian.com/categories/ai/index.xml" rel="self" type="application/rss+xml"/><item><title>“AI 编程”时代，技术从业者思考</title><link>https://blog.chenguixian.com/post/ai/ai-programming-era-core-skills-for-tech-professionals/</link><pubDate>Sun, 12 Oct 2025 15:12:24 +0800</pubDate><guid>https://blog.chenguixian.com/post/ai/ai-programming-era-core-skills-for-tech-professionals/</guid><description>&lt;p>在“AI 编程”时代，技术从业者需要转变思维模式，从“技术实现者”转变为“价值创造者”，需要特别注重四项核心能力：&lt;/p>
&lt;h2 id="1-需求解构能力">1 需求解构能力&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>核心：将模糊、复杂的行业需求转化为清晰、结构化的描述。&lt;/p></description></item><item><title>Vibe Coding：零代码基础实现从想法到产品</title><link>https://blog.chenguixian.com/post/ai/vibe-coding-zero-code-to-product-process/</link><pubDate>Sun, 12 Oct 2025 10:12:24 +0800</pubDate><guid>https://blog.chenguixian.com/post/ai/vibe-coding-zero-code-to-product-process/</guid><description>&lt;h2 id="4步创作法从想法到产品的标准流程">4步创作法：从想法到产品的标准流程&lt;/h2>
&lt;ul>
&lt;li>第一步，发现：找到真正值得解决的问题。发现阶段的成功标准是，能够用一句话清楚描述要解决的核心问题，并且这个问题是真实存在于用户群体中的。&lt;/li>
&lt;li>第二步，构思：将问题转化为具体的解决方案。重要的技巧是“场景故事法”，即为产品构建具体的使用场景，详细描述用户是谁、在什么情况下、为了什么目的使用你的产品。&lt;/li>
&lt;li>第三步，精炼：采用MVP（最小可行性产品）策略，将复杂的解决方案精简为最核心的价值点。&lt;/li>
&lt;li>第四步，实现：将核心价值点转化为真实可用的产品。将精炼后的方案交给 Al 编程工具或团队，转化为可运行的原型，并通过渐进式迭代、版本管理与持续反馈不断打磨产品细节。&lt;/li>
&lt;/ul>
&lt;h2 id="标准工具链让创作过程如行云流水">标准工具链：让创作过程如行云流水&lt;/h2>
&lt;ul>
&lt;li>分析工具：让思路更清晰
&lt;ul>
&lt;li>在发现和构思阶段，主要使用的是分析工具。这些工具可以帮助我们梳理需求、设计MVP方案、创建产品流程图。这里推荐两个好用的工具：DeepSeek和Mermaid&lt;/li>
&lt;li>有模糊的产品想法后，可借助DeepSeek来明确需求边界、用户画像、功能优先级等关键要素。例&lt;/li>
&lt;li>Mermaid专门用于创建产品流程图。流程图看似技术性很强，却是帮助厘清产品逻辑的最佳工具。借助清晰的流程图，可明确完整的产品使用路径、发现可能存在的逻辑漏洞，为后续开发提供明确的指导。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>开发工具：让想法变成现实
&lt;ul>
&lt;li>在精炼和实现阶段，需要的是能够快速将抽象构想转化为具体产品的开发工具。1.3.3节介绍了6种AI编程工具（Lovable、V0、Bolt.new、Cursor、Windsurf和Trae）&lt;/li>
&lt;li>Lovable扮演着“产品孵化器”的角色。完成前3步的发现、构思和精炼后，Lovable能够理解你的完整产品构想，并将其转化为可运行的应用原型。它的价值不仅在于代码生成，更在于能够处理产品开发中的各种技术细节，让你能够专注于产品本身而不是技术实现（从数据库设计到用户认证，从界面布局到功能逻辑）细节。&lt;/li>
&lt;li>V0可帮助快速迭代界面设计；如果需要开发移动应用，Bolt.new可提供完整的移动开发环境。关键是要根据在精炼阶段确定的产品特性，选择最合适的工具组合。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>优化工具：让产品更加完善&lt;/li>
&lt;/ul>
&lt;h2 id="核心设计原则让每个产品都有灵魂">核心设计原则：让每个产品都有灵魂&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>MVP原则：先求有，再求好。&lt;/p></description></item><item><title>一个半月高强度 Claude Code ：Vibe coding 是一种全新的思维模式</title><link>https://blog.chenguixian.com/post/ai/claude-code-vibe-coding-programming-practice-summary/</link><pubDate>Fri, 22 Aug 2025 10:12:24 +0800</pubDate><guid>https://blog.chenguixian.com/post/ai/claude-code-vibe-coding-programming-practice-summary/</guid><description>&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/1937463851412067913">一个半月高强度 Claude Code ：Vibe coding 是一种全新的思维模式&lt;/a>&lt;/p>
&lt;p>这篇文章是作者在使用 Claude Code（简称 CC）进行高强度编程实践一个半月后的总结。&lt;/p>
&lt;h2 id="笔记">笔记&lt;/h2>
&lt;h3 id="1-vibe-coding-的迭代速度">1. Vibe Coding 的迭代速度&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>核心观点&lt;/strong>：CC 带来的最大震撼是产品迭代速度的提升。CC 的更新频率极高，从自定义命令到 Hooks 功能，再到 Subagent 解决上下文窗口限制问题，短短一个半月内功能不断更新。&lt;/li>
&lt;li>&lt;strong>现象&lt;/strong>：AI 辅助开发领域发展迅猛，几天甚至几小时完成一个产品成为可能。&lt;/li>
&lt;li>&lt;strong>悖论&lt;/strong>：AI 提高了开发效率，但同时也加剧了竞争。开发者需要适应快速迭代的节奏，否则可能被市场淘汰。&lt;/li>
&lt;li>&lt;strong>建议&lt;/strong>：在 vibe coding 时代，不要被工具束缚，保持思考和生活空间。&lt;/li>
&lt;/ul>
&lt;h3 id="2-从传统-editor-ai-的转换">2. 从传统 Editor AI 的转换&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>核心观点&lt;/strong>：传统编辑器 AI 工具（如 Cursor、Windsurf、GitHub Copilot 等）与 CC 的主要区别在于交互模式和全局感。&lt;/li>
&lt;li>&lt;strong>问题分析&lt;/strong>：
&lt;ul>
&lt;li>编辑器 AI 的交互模式限制了开发者的视野，容易导致同步问题。&lt;/li>
&lt;li>CC 作为命令行工具，更注重全局理解和项目整体操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>优势&lt;/strong>：CC 的模型质量和 token 使用量大，使其在效果上优于传统编辑器 AI。&lt;/li>
&lt;/ul>
&lt;h3 id="3-认识-cc-的边界和长处">3. 认识 CC 的边界和长处&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>擅长领域&lt;/strong>：分析代码逻辑、理解模块调用关系、生成架构图、快速实现算法、搭建项目框架、编写测试用例等。&lt;/li>
&lt;li>&lt;strong>不擅长领域&lt;/strong>：全局变量重命名、复杂重构（需要 100% 准确性的任务）。&lt;/li>
&lt;li>&lt;strong>训练数据偏差&lt;/strong>：CC 在前端代码和 TypeScript 方面表现出色，但在 iOS/Swift 开发中表现较差，存在 API 使用过时或错误的问题。&lt;/li>
&lt;/ul>
&lt;h3 id="4-思考先行还是实践先行">4. 思考先行还是实践先行&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Plan Mode&lt;/strong>：CC 提供的计划模式允许开发者与 AI 充分讨论后制定详细计划再开始编码。&lt;/li>
&lt;li>&lt;strong>两种极端方式&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>规划魔&lt;/strong>：详细规划每一个细节后再开始编码。&lt;/li>
&lt;li>&lt;strong>莽夫流&lt;/strong>：直接让 AI 开始写代码，发现问题再迭代。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>作者建议&lt;/strong>：根据项目和开发者经验选择合适的方式。对于既有项目，规划先行更有利于代码质量和项目规范；对于探索性项目，先动手搞出原型再迭代可能更高效。&lt;/li>
&lt;/ul>
&lt;h3 id="5-小步迭代还是放飞自我">5. 小步迭代还是放飞自我&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>核心观点&lt;/strong>：小步迭代（每次只完成一个小功能）通常比一次性完成所有代码更好。&lt;/li>
&lt;li>&lt;strong>问题分析&lt;/strong>：一次性生成大量代码可能导致调试复杂度增加，开发者失去对代码的掌控。&lt;/li>
&lt;li>&lt;strong>建议&lt;/strong>：
&lt;ul>
&lt;li>小步迭代的优点：可控性强、易于理解、保证质量、学习机会多。&lt;/li>
&lt;li>如果选择“放飞自我”，需要完善的测试、版本控制、分模块开发和交叉评审。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="6-任务规模和上下文制约">6. 任务规模和上下文制约&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>上下文窗口限制&lt;/strong>：CC 的上下文窗口为 200k，容易在复杂任务中耗尽。&lt;/li>
&lt;li>&lt;strong>解决方法&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>任务拆解&lt;/strong>：将大任务拆解为小任务，逐一完成。&lt;/li>
&lt;li>&lt;strong>使用 Subagent&lt;/strong>：通过 Subagent 分配任务，扩展上下文窗口。&lt;/li>
&lt;li>&lt;strong>手动 compact&lt;/strong>：在合适时机手动压缩上下文，避免自动压缩带来的问题。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="7-善用命令和周边工具">7. 善用命令和周边工具&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Command 和 Hooks&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>Command&lt;/strong>：将重复的 prompt 配置为命令，提高效率。&lt;/li>
&lt;li>&lt;strong>Hooks&lt;/strong>：在特定事件触发时自动执行命令，适合固定工作流。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>MCP（Model Customization Package）&lt;/strong>：
&lt;ul>
&lt;li>补充模型知识，如获取最新 Apple 文档、连接项目管理工具（JIRA）、支持 LSP 等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>编译、分析和测试&lt;/strong>：
&lt;ul>
&lt;li>作者强调 AI 生成的代码必须经过测试。&lt;/li>
&lt;li>工作流程：编译、测试、运行 linter 和 formatter。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Code 之外，大有可为&lt;/strong>：
&lt;ul>
&lt;li>CC 可用于代码提交、撰写技术文档、更新 JIRA、数据处理等。&lt;/li>
&lt;li>通过工具（如 VibeTunnel）实现随时随地工作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="8-体感降智和更多限制">8. 体感降智和更多限制&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Opus 与 Sonnet&lt;/strong>：Opus 的效果明显优于 Sonnet，建议分级使用。&lt;/li>
&lt;li>&lt;strong>时间玄学&lt;/strong>：美国半夜（北京时间白天）使用效果更好，可能与服务器负载有关。&lt;/li>
&lt;li>&lt;strong>降智疑云&lt;/strong>：社区反馈近期体验不如之前，可能是资源紧张导致。&lt;/li>
&lt;li>&lt;strong>限制的阴霾&lt;/strong>：Anthropic 实施 weekly 限制，未来可能有更严格限制。&lt;/li>
&lt;li>&lt;strong>应对策略&lt;/strong>：
&lt;ul>
&lt;li>分级使用模型。&lt;/li>
&lt;li>错峰使用，避开高负载时段。&lt;/li>
&lt;li>提高 prompt 质量。&lt;/li>
&lt;li>合理使用 subagent。&lt;/li>
&lt;li>关注其他替代工具。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="9-总结和未来展望">9. 总结和未来展望&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>核心观点&lt;/strong>：Vibe coding 是一种全新的编程和思维模式，要求开发者重新思考编程的本质和价值。&lt;/li>
&lt;li>&lt;strong>建议&lt;/strong>：技术应为人服务，保持清醒，不要被工具束缚。&lt;/li>
&lt;/ul></description></item></channel></rss>